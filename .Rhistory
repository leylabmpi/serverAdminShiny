packrat::init()
install.packages("shiny")
install.packages("shiny")
library(shiny)
getOption("repos")
options(repos = c(CRAN = "https://cran.revolutionanalytics.com"))
install.packages(c("assertthat", "BH", "cli", "colorspace", "digest", "fansi", "ggplot2", "glue", "gtable", "httpuv", "jsonlite", "later", "lazyeval", "mime", "packrat", "pillar", "R6", "Rcpp", "rlang", "scales", "shiny", "stringi", "stringr", "tibble", "xtable"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib="/ebio/abt3_projects/software/dev/serverAdminShiny/packrat/lib-R/x86_64-pc-linux-gnu/3.5.1")
install.packages('packrat')
install.packages("packrat")
install.packages("shiny")
sessionInfo
sessionInfo()
options(repos = c(CRAN = "https://mran.microsoft.com/snapshot/2018-08-01"))
?checkpoint::checkpoint()
checkpoint::checkpoint('2019-06-20')
checkpoint::checkpoint('2019-06-20')
library(checkpoint)
checkpoint('2019-06-20')
sessionInfo()
source("packrat/init.R")
ls
source("packrat/init.R")
options(repos = c(CRAN = "https://mran.microsoft.com/snapshot/2019-04-15‚Äù))
)
""
''
''
"
options(repos = c(CRAN = "https://mran.microsoft.com/snapshot/2019-04-15"))
options
options(repos)
options('repos')
install.packages('shiny')
install.packages('shiny')
packrat::set_opts(external.packages = c("RevoUtils"))
install.packages('shiny')
options(repos = c(CRAN = "https://mran.microsoft.com/snapshot/2019-04-15"))
options(repos = c(CRAN = "https://mran.microsoft.com/snapshot/2019-04-15"))
options(repos = c(CRAN = "https://mran.microsoft.com/snapshot/2019-04-15"))
install.packages(c("rlang", "shiny"))
shiny::runApp('server_load')
runApp('server_load')
runApp('server_load')
# server admin
sh_df = function(){
# call df and parse
cols='source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
cmd = sprintf('df --output=%s %s', cols, P)
print(cmd)
}
# server admin
sh_df = function(){
# call df and parse
cols='source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
cmd = sprintf('df --output=%s %s', cols, P)
print(cmd)
}
sh_df()
# server admin
sh_df = function(){
# call df and parse
O='--output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
ret = system2('df', args=c(O, P), stdout=TRUE)
print(ret)
}
sh_df()
# server admin
sh_df = function(){
# call df and parse
O='--output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
ret = system2('df', args=c(O, P), stdout=TRUE)
return(ret)
}
ret = sh_df()
ret[1]
ret[2]
strsplit(ret[2], ' +')
strsplit(ret[2], ' +')[[1]]
sh_df = function(){
# call df and parse
O='--output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
ret = system2('df', args=c(O, P), stdout=TRUE)
ret = sapply(ret, function(x) strsplit(x, ' +')[[1]])
return(ret)
}
ret = sh_df()
ret
# server admin
sh_df = function(){
# call df and parse
O='--output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
ret = system2('df', args=c(O, P), stdout=TRUE)
ret = lapply(as.list(ret), function(x) strsplit(x, ' +')[[1]])
ret = do.call(rbind, ret)
return(ret)
}
ret = sh_df()
ret
sh_df = function(){
# call df and parse
O='--output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
ret = system2('df', args=c(O, P), stdout=TRUE)
ret = lapply(as.list(ret[2:length(ret)]), function(x) strsplit(x, ' +')[[1]])
ret = do.call(rbind, ret)
return(ret)
}
ret = sh_df()
ret
head(ret)
# server admin
sh_df = function(){
# call df and parse
O='--output=source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target'
P = '/ebio/abt3_projects/*'
ret = system2('df', args=c(O, P), stdout=TRUE)
ret = lapply(as.list(ret[2:length(ret)]), function(x) strsplit(x, ' +')[[1]])
ret = as.data.frame(do.call(rbind, ret))
colnames(ret) = c('Filesystem','Type','Inodes','IUsed','IFree',
'IUsePerc','1K_blocks','Used','Avail','UsePerc',
'File','Mounted_on')
return(ret)
}
ret = sh_df()
ret
head(ret)
sh_ps = function(){
ret = system2('ps', c('-aux'), stdout=TRUE)
print(ret)
}
sh_ps()
sh_ps = function(){
args = c('-auxo "uname,ppid,pid,etime,%cpu,%mem"')
ret = system2('ps', args, stdout=TRUE)
print(ret)
}
sh_ps()
sh_ps = function(){
args = c('--no-headers', '-auxo "uname,ppid,pid,etime,%cpu,%mem"')
ret = system2('ps', args, stdout=TRUE)
print(ret)
}
sh_ps()
sh_ps = function(){
args = c('--no-headers') #, '-auxo "uname,ppid,pid,etime,%cpu,%mem"')
ret = system2('ps', args, stdout=TRUE)
print(ret)
}
sh_ps()
install.packages("dplyr")
library(dplyr)
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
?fread
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
x = '2019-06-24 11:20:05.701915'
xx = c(x, x)
format_time(x)
format_time = function(x){
x = as.POSIXct(format(x, "%Y-%m-%d %H:%M:%S"))
return(x)
}
format_time(x)
x
runApp('server_load')
runApp()
runApp('server_load')
runApp()
runApp('server_load')
runApp()
runApp('server_load')
x = "2019-06-24 14:32:01"
format(x, "%Y-%m-%d %H:%M:%S")
y = "2019-06-24"
format(y, "%Y-%m-%d")
y = "2019"
format(y, "%Y")
y = "2019-06-24"
as.Date(y, "%Y-%m-%d")
as.Date(x, "%Y-%m-%d %H:%M:%S")
Sys.time()
format_time = function(x){
print(x)
#x = as.POSIXct(f(x, "%Y-%m-%d %H:%M:%S"))
x = as.POSIXct(DateTime,tz=Sys.timezone())
return(x)
}
format_time(x)
format_time = function(x){
print(x)
#x = as.POSIXct(f(x, "%Y-%m-%d %H:%M:%S"))
x = as.POSIXct(x,tz=Sys.timezone())
return(x)
}
format_time(x)
Sys.timezone()
format_time = function(x){
print(x)
#x = as.POSIXct(f(x, "%Y-%m-%d %H:%M:%S"))
x = as.POSIXlt(x,tz=Sys.timezone())
return(x)
}
format_time(x)
runApp('server_load')
runApp('server_load')
runApp('server_load')
install.packages("tidyr")
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
?plotOutput
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
?distinct
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp()
runApp()
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
?labs
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
?scale_y_continuous
runApp('server_load')
runApp('server_load')
runApp('server_load')
?scale_fill_discrete
?scale_fill_manual
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
shiny::runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp()
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
x = c("2019-07-18 12:28:02")
strptime(x, "%m-%d-%Y %H:%M:%S")
strptime(x, "%Y-%m-%d %H:%M:%S")
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
runApp('server_load')
shiny::runApp('/ebio/abt3_projects/software/dev/MicrobeMeter/plotter')
runApp('/ebio/abt3_projects/software/dev/MicrobeMeter/plotter')
install.packages("plotly")
shiny::runApp('server_load')
runApp('server_load')
